{"version":3,"sources":["components/SelectPlayers.js","components/NameInput.js","components/Player.js","components/Group.js","components/ScoreInput.js","components/RoundScore.js","components/Score.js","App.js","index.js"],"names":["SelectPlayers","props","handleSelectChange","bind","e","this","onSelectChange","target","value","optionsSet","opVal","onChange","React","Component","NameInput","handleNameChange","handleSubmit","onNameChange","onSubmitForm","inputs","i","push","name","className","htmlFor","type","aria-required","required","onSubmit","createInputs","Player","player","score","Group","player1","player2","groupName","players","ScoreInput","round","category","inputType","scoreSelectChange","checked","checkBoxVal","playerObj","defaultChecked","min","max","RoundScore","val","table","names","playerNames","scope","Score","scores","name1","name2","HandAndFootApp","state","resetGame","setState","console","log","event","round1","pick","out","black","red","wild","points","round2","round3","round4","preventDefault","roundSum","gameSum","updVal","parseInt","gameRound","roundScore","window","confirm","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.709eb32f.chunk.js","sourcesContent":["import React from 'react';\n\n/******************************************************************************\n * SelectPlayers\n *\n * Select the number of players that are playing hand and foot.\n * Choose between 4, 6, or 8 players.\n *****************************************************************************/\nexport default class SelectPlayers extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleSelectChange = this.handleSelectChange.bind(this)\n  }\n  \n  handleSelectChange(e) {\n    this.props.onSelectChange(e.target.value)\n  }\n\n  render() {\n    if (this.props.optionsSet === false) {\n      return (\n        <div>\n          <label>Number of Players: </label>\n          <select \n            value={this.props.opVal}\n            onChange = {this.handleSelectChange}\n          >\n            <option value=\"None\">Choose...</option>\n            <option value=\"4\">4</option>\n            <option value=\"6\">6</option>\n            <option value=\"8\">8</option>\n          </select>\n        </div>\n      )\n    } else {\n        return null;\n    }\n  }\n}","import React from 'react';\n\n/******************************************************************************\n * NameInput\n *****************************************************************************/\nexport default class NameInput extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleNameChange = this.handleNameChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  \n  handleNameChange(e) {\n    this.props.onNameChange(e)\n  }\n  \n  handleSubmit(e) {\n    this.props.onSubmitForm(e)\n  }\n  \n  createInputs() {\n    let inputs = []\n    \n    for(let i = 0; i < this.props.opVal; i++) {\n      if(i % 2 == 0) {\n        inputs.push(<h3>Group {(i + 2) / 2}</h3>)\n      }\n      const name = \"player\" + (i + 1)\n      inputs.push(\n        <div className=\"name-input\">\n          <label htmlFor={name}>Name: </label>\n          <input name={name} type=\"firstname\" aria-required=\"true\" value={this.props.name} onChange={this.handleNameChange} required />\n        </div>\n      )\n    }\n    return inputs\n  }\n  \n  render() {\n    if(this.props.opVal == \"None\" || this.props.optionsSet === true) {\n      return null\n    } else {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          {this.createInputs()}\n          <div>\n            <button>Start Game</button>\n          </div>\n        </form>\n      )\n    }\n  }\n}","import React from 'react';\n\n/******************************************************************************\n * Player\n *\n * Arrow function component that displays information related to a player.\n *****************************************************************************/\nconst Player = ({player}) => {\n  return (\n    <div>\n      <p className=\"player\">{player.name}\n        <span className=\"player-score\"> {player.score}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Player;","import React from 'react';\nimport Player from './Player';\n\n/******************************************************************************\n * Group\n * \n * A group consists of two players.\n *****************************************************************************/\nexport default class Group extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    // template\n  }\n\n  componentWillUnmount() {\n    // template\n  }\n\n  render() {\n    const player1 = this.props.player1;\n    const player2 = this.props.player2;\n    return (\n      <div>\n        <h3>Group {this.props.groupName}: {this.props.players[player1][\"score\"] + this.props.players[player2][\"score\"]}</h3>\n        <Player player={this.props.players[player1]} />\n        <Player player={this.props.players[player2]} />\n      </div>\n    );\n  }\n}","import React from 'react';\n\n/******************************************************************************\n * ScoreInput\n *\n * ScoreInput can either be a checkbox, select box, or text box that accepts\n * an integer input depending on the score being kept.\n *\n * Props\n *  Player\n *  Round\n *  Category\n *****************************************************************************/\nexport default class ScoreInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    // template\n  }\n\n  componentWillUnmount() {\n    // template\n  }\n\n  scoreSelectChange(player, round, category, e) {\n    if(this.props.inputType == 'checkbox') {\n      this.props.scoreSelectChange(player, round, category, e.target.checked ? 1 : 0);\n    } else if(this.props.inputType == 'select') {\n      this.props.scoreSelectChange(player, round, category, e.target.value);\n    } else {\n      this.props.scoreSelectChange(player, round, category, e.target.value);\n    }\n  }\n\n  render() {\n    if(this.props.inputType == 'checkbox') {\n      let checkBoxVal = this.props.playerObj[this.props.round][this.props.category] == 1 ? true : false;\n      return <input type=\"checkbox\" defaultChecked={checkBoxVal} onChange={(e) => this.scoreSelectChange(this.props.player, this.props.round, this.props.category, e)}></input>\n    } else if (this.props.inputType == 'select') {\n      return (\n        <select value={this.props.playerObj[this.props.round][this.props.category]}\n         onChange={(e) => this.scoreSelectChange(\n           this.props.player, this.props.round, this.props.category, e)}\n        >\n          <option value=\"0\">0</option>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n          <option value=\"6\">6</option>\n        </select>\n      );\n    } else if (this.props.inputType == 'number') {\n      return <input type=\"number\" min=\"0\" max=\"1000\" value={this.props.playerObj[this.props.round][this.props.category]} onChange={(e) => this.scoreSelectChange(this.props.player, this.props.round, this.props.category, e)}></input>\n    }\n  }\n}","import React from 'react';\nimport ScoreInput from './ScoreInput';\n\n/******************************************************************************\n * RoundScore\n *****************************************************************************/\nexport default class RoundScore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createInputs = this.createInputs.bind(this);\n    this.scoreSelectChange = this.scoreSelectChange.bind(this);\n    this.round = \"round1\";\n  }\n\n  componentDidMount() {\n    // template\n  }\n\n  componentWillUnmount() {\n    // template\n  }\n\n  scoreSelectChange(player, round, category, val) {\n    this.props.scoreSelectChange(player, round, category, val)\n  }\n\n  createInputs(category, type) {\n    let table = []\n\n    for(const player in this.props.players) {\n      table.push(\n        <td>\n          <ScoreInput playerObj={this.props.players[player]} player={player} round={this.round}\n                      category={category} inputType={type}\n                      scoreSelectChange={this.scoreSelectChange}/>\n        </td>\n      )\n    }\n\n    return table;\n  }\n\n  playerNames() {\n    let names = []\n    \n    for(const player in this.props.players) {\n      names.push(<th>{this.props.players[player].name}</th>);\n    }\n\n    return names;\n  }\n\n  render() {\n    return(\n    <div>\n      <h4>Scores</h4>\n      <table>\n        <thead>\n          <tr>\n            <th>Type</th>\n            {this.playerNames()}\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">Draw 22</th>\n            {this.createInputs(\"pick\", \"checkbox\")}\n          </tr>\n          <tr>\n            <th scope=\"row\">Out</th>\n            {this.createInputs(\"out\", \"checkbox\")}\n          </tr>\n          <tr>\n            <th scope=\"row\">Black Books</th>\n            {this.createInputs(\"black\", \"select\")}\n          </tr>\n          <tr>\n            <th scope=\"row\">Red Books</th>\n            {this.createInputs(\"red\", \"select\")}\n          </tr>\n          <tr>\n            <th scope=\"row\">Wild Books</th>\n            {this.createInputs(\"wild\", \"select\")}\n          </tr>\n          <tr>\n            <th scope=\"row\">Points</th>\n            {this.createInputs(\"points\", \"number\")}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    );\n  }\n}","import React from 'react';\nimport Group from './Group';\nimport RoundScore from './RoundScore';\n\n/******************************************************************************\n * Score\n *****************************************************************************/\nexport default class Score extends React.Component {\n  constructor(props) {\n    super(props);\n    this.scoreSelectChange = this.scoreSelectChange.bind(this);\n  }\n\n  componentDidMount() {\n    // template\n  }\n\n  componentWillUnmount() {\n    // template\n  }\n\n  scoreSelectChange(player, round, category, val) {\n    this.props.scoreSelectChange(player, round, category, val)\n  }\n\n  render() {\n    if (this.props.optionsSet === false) {\n      // do not render the score\n      return null;\n    } else {\n      let scores = [];\n\n\n      for(let i = 0; i < this.props.opVal; i += 2) {\n        const name1 = \"player\" + (i + 1);\n        const name2 = \"player\" + (i + 2);\n        scores.push(\n          <Group groupName={(i + 2) / 2} players={this.props.players} player1={name1} player2={name2} />\n        )\n      }\n\n      return (\n        <div>\n          {scores}\n          <RoundScore\n            players={this.props.players}\n            scoreSelectChange={this.scoreSelectChange} />\n        </div>\n      );\n    }\n  }\n}","import React from 'react';\n\nimport './style.css';\nimport SelectPlayers from './components/SelectPlayers';\nimport NameInput from './components/NameInput';\nimport Score from './components/Score';\n\n/******************************************************************************\n* HandAndFootApp\n*****************************************************************************/\nexport default class HandAndFootApp extends React.Component {\n constructor(props) {\n   super(props)\n\n   this.state = {\n     opVal: \"None\",\n     players: [],\n     optionsSet: false\n   }\n\n   this.handleSelectChange = this.handleSelectChange.bind(this)\n   this.handleNameChange = this.handleNameChange.bind(this)\n   this.handleSubmit = this.handleSubmit.bind(this)\n   this.scoreSelectChange = this.scoreSelectChange.bind(this)\n   this.resetGame = this.resetGame.bind(this)\n }\n \n handleSelectChange(opVal) {\n   this.setState( {opVal: opVal}, () => console.log(this.state.opVal) )\n }\n \n handleNameChange(event) {\n   this.setState({\n     players: {\n       ...this.state.players,\n       [event.target.name]: {\n         name: event.target.value,\n         score: 0,\n         round1: {\n           pick: 0,\n           out: 0,\n           black: 0,\n           red: 0,\n           wild: 0,\n           points: 0,\n           score: 0\n         },\n         round2: {\n           pick: 0,\n           out: 0,\n           black: 0,\n           red: 0,\n           wild: 0,\n           points: 0,\n           score: 0\n         },\n         round3: {\n           pick: 0,\n           out: 0,\n           black: 0,\n           red: 0,\n           wild: 0,\n           points: 0,\n           score: 0\n         },\n         round4: {\n           pick: 0,\n           out: 0,\n           black: 0,\n           red: 0,\n           wild: 0,\n           points: 0,\n           score: 0\n         }\n       }\n     }\n   }, () =>\n     console.log(\"Hey!\"));\n }\n \n handleSubmit(event) {\n   event.preventDefault();\n   this.setState( {optionsSet: true}, () => console.log(this.state.optionsSet))\n\n   console.log(this.state);\n }\n\n scoreSelectChange(player, round, category, val) {\n   let roundSum = 0;\n   let gameSum = 0;\n\n   // sum the round score and save the state\n   for(let score in this.state.players[player][round]) {\n     let updVal = this.state.players[player][round][score];\n\n     // if updated category, use updated score\n     if (score == category) {\n       updVal = val;\n     }\n\n     switch(score) {\n       case \"pick\":\n         roundSum += (updVal * 100);\n         break;\n       case \"out\":\n         roundSum += (updVal * 100);\n         break;\n       case \"black\":\n         roundSum += (updVal * 300);\n         break;\n       case \"red\":\n         roundSum += (updVal * 500);\n         break;\n       case \"wild\":\n         roundSum += (updVal * 2000);\n         break;\n       case \"points\":\n         roundSum += parseInt(updVal);\n         break;\n       default:\n         break;\n     }\n   }\n   \n   // sum the game score and save the state\n   for(let gameRound in this.state.players[player]) {\n     let roundScore = this.state.players[player][gameRound][\"score\"];\n\n     // TODO: change state structure\n     if(gameRound == \"name\" || gameRound == \"score\") {\n       continue;\n     }\n\n     // if current round, use updated score\n     if(gameRound == round) {\n       roundScore = roundSum;\n     }\n\n     gameSum += roundScore;\n   }\n\n   this.setState({\n     players: {\n       ...this.state.players,\n       [player]: {\n         ...this.state.players[player],\n         score: gameSum,\n         [round]: {\n           ...this.state.players[player][round],\n           score: roundSum,\n           [category]: val\n         }\n       }\n     }\n   });\n }\n\n resetGame() {\n   var response = window.confirm(\"Are you sure you want to restart? The current game will be lost.\");\n\n   if(response) {\n     this.setState({\n       opVal: \"None\",\n       players: [],\n       optionsSet: false\n     });\n   }\n }\n \n render() {\n   return (\n     <div>\n       <SelectPlayers\n         opVal = {this.state.opVal}\n         optionsSet = {this.state.optionsSet}\n         onSelectChange = {this.handleSelectChange}\n       />\n       <NameInput \n         opVal = {this.state.opVal}\n         optionsSet = {this.state.optionsSet}\n         onNameChange = {this.handleNameChange}\n         onSubmitForm = {this.handleSubmit}\n       />\n       <Score\n         opVal = {this.state.opVal}\n         players = {this.state.players}\n         optionsSet = {this.state.optionsSet}\n         scoreSelectChange = {this.scoreSelectChange}\n       />\n\n       {this.state.optionsSet === true &&\n         <button onClick={this.resetGame}>Restart</button>\n       }\n     </div>\n   )\n }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport HandAndFootApp from './App';\n\nReactDOM.render(<HandAndFootApp />, document.getElementById('root'));"],"sourceRoot":""}